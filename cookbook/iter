实现一个自定义的迭代模式，跟普通的内置函数是不一样的，内置函数比如：range()和reversed()等。


想实现一个新的迭代模式，使用一个生成器函数来定义。

一个函数中需要有一个yield语句就可以将其转换为一个生成器。和普通的函数不同，生成器只能用于迭代操作。

一个生成器函数的主要特征是它只会回应在迭代中使用到的next操作。一旦生成器函数返回退出，则迭代终止.

python的迭代协议要求一个__iter__()方法返回一个特殊的迭代器对象。这个迭代器对象实现了__next__()
方法病通过stopiteration异常来标识迭代的完成.

反方向迭代一个序列使用reversed()函数。

反向迭代仅仅是当对象的大小可预先确定或者实现了__reversed__()的特殊方法的时候才能生效.
如果两者都不符合的时候，那必须先讲将对象转换为一个列表才可以。

# Print a file backwards
f = open('somefile')
for line in reversed(list(f)):
    print(line, end='')


如果可迭代对象元素很多的时候，将其转换为一个列表要消耗大量的内存.

可以在自定义的类上实现__reversed__()方法来实现反向迭代.
