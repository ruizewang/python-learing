1.实现一个键对应多个值的字典，multidict

一个字典就是一个键对应一个单值的映射。想一个键映射多个值，需要将这个多值放到另外的容器中。比如列表或者集合中。
想保持元素的插入顺序，就使用列表。如果想去除重复的元素并且不关心元素的顺序问题，就使用集合。

使用collections模块中的defaultdict来构造这样的字典。defaultdict的一个特征是会自动初始化每个key刚开始对应的值.
所以只需要关注添加元素操作就可以了。

一般来讲，创建一个多值映射的字典是很简单的，自己进行创建的话，在进行值的初始化的时候，会比较麻烦。
d = {}
for key, value in pairs:
    if key not in d:
        d[key] = []
    d[key].append(value)

如果使用 defaultdict 的话代码就更加简洁了：

d = defaultdict(list)
for key, value in pairs:
    d[key].append(value)

2.字典的排序
在进行迭代或者序列化的时候，想控制元素的顺序？？？

为了能控制一个字典中元素的顺序，可以使用collections模块中的OrderDict累类。子啊迭代操作的时候会保持元素被插入时候的顺序.

当你想构建一个将来需要序列化或者编码成其他格式的映射的时候，这个时候orderedDict是很有效的.
比如，你想精确控制以 JSON 编码后字段的顺序，你可以先使用 OrderedDict 来构建这样的数据：

>>> import json
>>> json.dumps(d)
'{"foo": 1, "bar": 2, "spam": 3, "grok": 4}'
>>>

原理是：
OrderedDict在内部维护着一个根据键插入顺序排序的双向链表。每次当一个新的元素插入进来的时候， 它会被放到链表的尾部。对于一个已经存在的键的重复赋值不会改变键的顺序。

需要注意的是，一个 OrderedDict 的大小是一个普通字典的两倍，因为它内部维护着另外一个链表。 所以如果你要构建一个需要大量 OrderedDict 实例的数据结构的时候（比如读取 100,000 行 CSV 数据到一个 OrderedDict 列表中去）， 那么你就得仔细权衡一下是否使用 OrderedDict 带来的好处要大过额外内存消耗的影响。
